
Unix-Linux编程实践教程 & Linux学习

第八章

  8.1 进程=运行中的程序
  一个程序是存储在文件中的机器指令序列。一般他是由编译器将源代码编译成二进制个格式的代码。
运行一个程序意味着将这个机器指令序列载入内存然后让处理器（CPU）逐条执行这些指令。
  一个可执行程序是一个机器指令及其数据的序列。一个进程是程序运行时的内存空间和设置。
  数据和程序存储在磁盘文件中，程序在进程中运行。
  进程存在于用户空间。用户空间是存放运行的程序和它们的数据的一部分内存空间。
  进程概念抽象，但它代表了一些非常实际的实体：内存中的一些字节。
  建立一个进程有点像建立一个磁盘文件。内核要找到一些来存放程序指令和数据的空闲内存页。内核
还要建立数据结构来存放相应的内存分配情况和进程属性。

  8.3 shell:进程控制和程序控制的一个工具
  shell是一个管理进程和运行程序的程序。
  主要功能：
  （1）运行程序
  （2）管理输入和输出
  （3）可编程

  8.4 shell是如何运行程序的
  为了要写一个shell,需要学会：
  （1）运行一个程序；
  （2）建立一个进程；
  （3）等待exit()。

  一个程序如何运行另一个程序: 程序调用execvp(progname, arglsit)
  （1）程序调用execvp
  （2）内核从磁盘将程序载入
  （3）内核将arglist复制到进程
  （4）内核调用main（argc,argv）
  注：execvp有两个参数：要运行的程序名和那个程序的命令行参数数组。当程序运行时命令行参数以
argv[]传给程序。注意，将数组的第一个元素置为程序的名称。特别注意，最后一个元素必须是NULL!

  如何建立新的进程： 一个进程调用fork（）来复制自己
  进程拥有程序和当前运行到的位置。进程调用fork,当控制转移到内核中的fork代码后，内核做：
  （1）分配新的内存块和内核数据结构
  （2）复制原来的进程到新的进程
  （3）向运行进程集添加新的进程
  （4）将控制返回给两个进程
  注：父进程和子进程仅仅是进程号PID不一样？
     新的进程从fork返回的地方开始运行，而不是从头开始运行。
     从forkdemo1.c中可以看出，不同的进程。fork的返回值是不同的。在子进程中fork返回0，在父进
程中返回真是的PID。

  父进程如何等待子进程的退出：进程调用wait等待子进程结束。pid = wait（&status）
  在父进程，控制流始于程序的开始，在wait的地方阻塞。在子进程，控制流始于main函数的中部，然后运
行child_code函数，最后调用exit结束。子进程调用exit就像发送一个信号给父进程以唤醒它。
  wait系统调用同时从内核取得退出状态或者信号序列以告诉子进程是如何结束的。
  wait作用：唤醒父进程（通知）
	   通过分析*status的对应位值得出子进程的退出状态（通信）
     git push origin :dev 删除对应的远程仓库的dev分支	8:52 PM 12/2/2016



































